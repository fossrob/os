name: build-os

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - '**.md'
      - '**.txt'
  schedule:
    - cron: '20 23 * * *'  # 23h20 UTC
  workflow_dispatch:  # allows you to run this workflow manually from the actions tab

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: [main, nvidia]
        base_name: [os, os-dx]
        major_version: [37, 38]
        include:
          - major_version: 37
            is_latest_version: false
            is_stable_version: false
          - major_version: 38
            is_latest_version: true
            is_stable_version: true
    steps:
      - uses: actions/checkout@v3

      - name: Matrix Variables
        id: matrix-variables
        run: |
          if [[ "${{ matrix.image_flavor }}" == "main" ]]; then
              echo "IMAGE_NAME=${{ matrix.base_name }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ format('{0}-{1}', matrix.base_name, matrix.image_flavor) }}" >> $GITHUB_ENV
          fi

      - name: Generate Tags
        id: generate-tags
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          MAJOR_VERSION="${{ matrix.major_version }}"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("${SHA_SHORT}-${MAJOR_VERSION}")
          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${MAJOR_VERSION}" "${MAJOR_VERSION}-${TIMESTAMP}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BUILD_TAGS+=("latest")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Fedora Version
        id: labels
        run: |
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/silverblue-${{ matrix.image_flavor }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      - name: Image Build
        id: image-build
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_FLAVOR=${{ matrix.image_flavor }}
            MAJOR_VERSION=${{ matrix.major_version }}
          oci: false
          extra-args: |
            --cache-from=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ matrix.major_version }}
            --layers
            --target=${{ matrix.base_name }}

      - name: Push To Registry
        id: registry-push
        uses: redhat-actions/push-to-registry@v2
        env:
          REGISTRY_URL: ghcr.io/${{ github.repository_owner }}
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          # Name of the image/manifest to push (e.g. username/imagename or imagename)
          image: ${{ steps.image-build.outputs.image }}
          # 'The tag or tags of the image/manifest to push. For multiple tags, seperate by whitespace. For example, "latest v1"'
          tags: ${{ steps.image-build.outputs.tags }}
          # Hostname and optional namespace to push the image to (eg. quay.io/username or quay.io)
          registry: ${{ env.REGISTRY_URL }}
          # Username to use as credential to authenticate to the registry
          username: ${{ env.REGISTRY_USER }}
          # Password to use as credential to authenticate to the registry
          password: ${{ env.REGISTRY_PASSWORD }}
          # Extra args to be passed to podman push. Separate arguments by newline. Do not use quotes - @actions/exec will do the quoting for you.
          extra-args: |
            --disable-content-trust
